#include "EmonLib.h"
#include <EEPROM.h>
#define BLYNK_PRINT Serial
#define BLYNK_TEMPLATE_ID "TMPL36ecSfkCS"
#define BLYNK_TEMPLATE_NAME "Smart Energy Meter Monitoring System"
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

const int numDevices = 2; // Number of devices to monitor

EnergyMonitor emon[numDevices];

#define vCalibration1 83.3
#define currCalibration1 0.50

#define vCalibration2 90.0 // Adjust these calibration values for the second device
#define currCalibration2 0.48 // Adjust these calibration values for the second device

BlynkTimer timer;

char auth[] = "qvtjDcQPCPvuroKQCR7jJOXnzf1hGMVU";
char ssid[] = "MR.SWEET'S DEVICE";
char pass[] = "33333337";

float kWh[numDevices] = {0};
unsigned long lastmillis[numDevices];

// Constants
#define COST_PER_UNIT 0.15  // Cost of electricity per unit in dollars
#define SECONDS_PER_HOUR 3600  // Seconds in an hour

// Function to calculate electricity bill
float calculateBill(float powerWatt, float hours) {
    float energyConsumed = (powerWatt * hours) / SECONDS_PER_HOUR;  // Convert hours to seconds
    float billAmount = energyConsumed * COST_PER_UNIT;
    return billAmount;
}

void myTimerEvent()
{
  for (int i = 0; i < numDevices; i++)
  {
    emon[i].calcVI(10, 6000);
    kWh[i] = kWh[i] + emon[i].apparentPower * (millis() - lastmillis[i]) / 3600000000.0;
    yield();
    Serial.print(" Vrms: ");
    Serial.print(emon[i].Vrms, 2);
    Serial.print("V");
    EEPROM.put(0, emon[i].Vrms);
    delay(100);

    Serial.print("\tIrms: ");
    Serial.print(emon[i].Irms, 4);
    Serial.print("A");
    EEPROM.put(4, emon[i].Irms);
    delay(100);

    Serial.print("\tPower: ");
    Serial.print(emon[i].apparentPower, 4);
    Serial.print("W");
    EEPROM.put(8, emon[i].apparentPower);
    delay(100);

    Serial.print("\tkWh: ");
    Serial.print(kWh[i], 5);
    Serial.println("kWh");
    EEPROM.put(12, kWh[i]);

    lastmillis[i] = millis();

    Blynk.virtualWrite(V0 + (i * 4), emon[i].Vrms);
    Blynk.virtualWrite(V1 + (i * 4), emon[i].Irms);
    Blynk.virtualWrite(V2 + (i * 4), emon[i].apparentPower);
    Blynk.virtualWrite(V3 + (i * 4), kWh[i]);
  }
}

void setup()
{
  Serial.begin(115200);
  Blynk.begin(auth, ssid, pass);
  emon[0].voltage(35, vCalibration1, 1.7);  // Voltage: input pin, calibration, phase_shift
  emon[0].current(34, currCalibration1);
  emon[1].voltage(33, vCalibration2, 1.7);  // Voltage: input pin, calibration, phase_shift
  emon[1].current(32, currCalibration2);
  lastmillis[0] = millis();
  lastmillis[1] = millis();  

  timer.setInterval(5000L, myTimerEvent);
  
}

void loop()
{
  Blynk.run();
  timer.run();
}
